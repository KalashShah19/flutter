import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async{
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(const MyApp());

}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(

        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  TextEditingController txtName = new TextEditingController();
  TextEditingController txtPrice = new TextEditingController();
  final CollectionReference _tblProduct = FirebaseFirestore.instance.collection("tblProduct");

  void showForm(DocumentSnapshot? documentSnapshot) async{
     if(documentSnapshot != null)
       {
         txtName.text = documentSnapshot['name'];
         txtPrice.text = documentSnapshot['price'].toString();
       }
      showModalBottomSheet(context: context,
          elevation: 10,
          isScrollControlled: true,
          builder: (context) {
            return Padding(
              padding: EdgeInsets.only(
                left: 20,
                right: 20,
                top: 20,
                bottom: MediaQuery.of(context).viewInsets.bottom + 50
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  TextField(
                    controller: txtName,
                    decoration: InputDecoration(
                      hintText: 'Enter Name'
                    ),
                    keyboardType: TextInputType.text,
                  ),
                  SizedBox(
                    height: 10,
                  ),
                  TextField(
                    controller: txtPrice,
                    decoration: InputDecoration(
                        hintText: 'Enter Price'
                    ),
                    keyboardType: TextInputType.numberWithOptions(decimal: true),
                  ),
                  SizedBox(
                    height: 10,
                  ),
                  ElevatedButton(onPressed: () async{
                    String name = txtName.text.toString();
                    double? price = double.tryParse(txtPrice.text.toString());

                    if(documentSnapshot == null)
                      await Add(name, price);
                    else
                      await Update(documentSnapshot.id, name, price);

                    txtName.clear();
                    txtPrice.clear();
                    Navigator.of(context).pop();
                  }, child: Text(documentSnapshot==null ? 'Create New' : 'Update'))
                ],
              ),
            );
          },);
  }

  Future<void> Add(String name, double? price) async{
    await _tblProduct.add({"name":name,"price":price});
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Product Added Successfully')));
  }

  Future<void> Update(String id, String name, double? price) async{
    await _tblProduct.doc(id).update({"name":name,"price":price});
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Product Updated Successfully')));
  }

  Future<void> Delete(String id) async{
    await _tblProduct.doc(id).delete();
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Product Deleted Successfully')));
  }
  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Demo'),
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: (){
          showForm(null);
        },
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.startFloat,
      body: StreamBuilder(
        stream: _tblProduct.snapshots(), 
        builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if(_tblProduct.snapshots != null)
            {

              return ListView.builder(itemBuilder: (context, index) {
              final DocumentSnapshot documentSnapshot = snapshot.data!.docs[index];
                return Card(
                  margin: EdgeInsets.all(10),
                  elevation: 5,
                  child: ListTile(
                    title: Text(documentSnapshot['name']),
                    subtitle: Text(documentSnapshot['price'].toString()),
                    trailing: SizedBox(
                      width: 100,
                      child: Row(
                        children: [
                          IconButton(onPressed: (){
                            showForm(documentSnapshot);
                          }, icon: Icon(Icons.edit)),
                          IconButton(onPressed: (){
                            Delete(documentSnapshot.id);
                          }, icon: Icon(Icons.delete))
                        ],
                      ),
                    ),
                  ),

                );
              },itemCount: snapshot.data!.docs.length,);
            }
          else {
            return Center(
                child: Text('No Data Found')
            );
          }
      },
        
      ),
    );
  }
}


